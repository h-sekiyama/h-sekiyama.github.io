<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>しょぶろぐ</title>
  <subtitle>猫好きエンジニアの勉強日記</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://h-sekiyama.github.io/"/>
  <updated>2017-03-06T06:08:24.000Z</updated>
  <id>https://h-sekiyama.github.io/</id>
  
  <author>
    <name>せっきー</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>猫でも分かるgit rebaseの使い方</title>
    <link href="https://h-sekiyama.github.io/2017/02/22/2/"/>
    <id>https://h-sekiyama.github.io/2017/02/22/2/</id>
    <published>2017-02-22T04:09:44.000Z</published>
    <updated>2017-03-06T06:08:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>どうも、せっきーです。  </p>
<p>gitを使い始めてからはや4年。<br>よく使われる一通りのgitコマンドは使いこなせる様になったかと思いきや、git rebaseはずっと苦手で、ずっとなあなあにして来ました。<br><br><br><br><br>git rebaseは言ってしまえばgitのコミットログをキレイにする為のコマンドなのですが、イマイチその有用性を実感できず、最近までひとつのプルリクにいくつもログが残ったままpushしておりました。  </p>
<p>しかしこのままではいかんと思い、このたびgit rebaseをマスターすべく勉強してみました。<br><br><br><br><br>git rebaseを理解しようとして挫折する人の一番の壁は、コンフリクトした際に「no branch」に飛ばされてしまう現象じゃないかと個人的には思います。<br><br><br>実際にターミナルの画面を見ながら解説します。<br>まずは普通の成功例。  </p>
<p>こんなログのブランチがあったとします。 </p>
<p><img src="https://i.gyazo.com/198e4597b35276a8309565922d784f7f.png" width="500"><br><br><br><br><br>例えば修正Bと修正Cのログをひとつにまとめたいと思った場合のコマンドは、<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git rebase -i HEAD~2</div></pre></td></tr></table></figure></p>
<p>になります。<br>実際に打ってみます。  </p>
<p><img src="https://i.gyazo.com/5761bac75ac98865d7972d6c9cb51a80.png" width="500">  </p>
<p>するとこんな画面になりますので、<br>ベースとなるコミットにpick、他とまとめたいコミットにsquashを入力し、<br><img src="https://i.gyazo.com/8df69d0084dde84a005bb8e204d37aca.png" width="500">  </p>
<p>:wqで保存します。すると、<br><img src="https://i.gyazo.com/a3150837a78b86720fe7ee9f60bfbed0.png" width="500"><br>コミットメッセージ編集画面になりますので、１行にまとめて、</p>
<p><img src="https://i.gyazo.com/f5a992fbca73171ba3153375fbd1002c.png" width="500">  </p>
<p>同様に:wqで保存します。<br>すると、<br><img src="https://i.gyazo.com/0e776c92dc2c5c5419952ac45d4c5cd1.png" width="500">  </p>
<p>こんな感じでひとつのコミットにまとめられました。  </p>
<p>しかしたまにこんな感じのエラーが出て…<br><img src="https://i.gyazo.com/f0f9168965010eee93ae592f2e4ff7e3.png" width="500">  </p>
<p>この様に(no branch)と言う謎のブランチに飛ばされる事があります。<br><img src="https://i.gyazo.com/ee18617b98441a911f79c4d386cc0871.png" width="500">  </p>
<p>これはrebaseする事によりコンフリクトが起こる為、自動的にマージ出来ない場合に起きます。  </p>
<p>そうなった場合は冷静にコンフリクトしているファイルを確認してそのファイルのコンフリクトを解消して、<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git add</div></pre></td></tr></table></figure></p>
<p>そして通常ならこのままgit commitしたくなりますが、そうではなく、<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git rebase --continue</div></pre></td></tr></table></figure></p>
<p>と打ちます。<br>こうする事でコンフリクトを解消した上で、rebaseできます。  </p>
<p>そしてブランチの位置もno branchではなく、元いたブランチに戻って来てます。</p>
<p>さて、ここまででコミットログをキレイに出来たのですが、いよいよコミット結果をリモートブランチにpushしたいのですが、普通に</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push origin (hoge)</div></pre></td></tr></table></figure>
<p>と打っても以下の様なエラーになります。</p>
<p><img src="https://i.gyazo.com/661474af4e979d62805d3825e8b1f90e.png" width="500"></p>
<p>なのでここでは-fコマンドを使いましょう。  </p>
<p>このオプションは上記エラーがあっても強制的にpushするコマンドなので、自分以外が触っている可能性があるブランチでは使わない様に。  </p>
<p>以上、git rebaseのやり方とつまづきドコロでした。  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;どうも、せっきーです。  &lt;/p&gt;
&lt;p&gt;gitを使い始めてからはや4年。&lt;br&gt;よく使われる一通りのgitコマンドは使いこなせる様になったかと思いきや、git rebaseはずっと苦手で、ずっとなあなあにして来ました。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;git reb
    
    </summary>
    
    
      <category term="git" scheme="https://h-sekiyama.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Seleniumのテストを書いてる時にThread.sleepを使わずにwait処理を実装する方法</title>
    <link href="https://h-sekiyama.github.io/2017/02/20/3/"/>
    <id>https://h-sekiyama.github.io/2017/02/20/3/</id>
    <published>2017-02-20T04:27:00.000Z</published>
    <updated>2017-02-20T04:47:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>どうも、せっきーです。<br>いま業務でseleniumを使ったUI自動テストの実装を進めています。  </p>
<p>seleniumは色んな言語で記述できるし、何ならユーザーの動作を記録して自動でテストケースを生成したり、色々できるんですが、その辺の説明は他のブログにお任せします。  </p>
<p>今回やりたい事は、タイトルの通りですが、Thread.sleepを使わずに一定時間waitする処理を自前で作る方法についてです。<br>また、テストケースを記述する言語はJAVAになります。  </p>
<p>seleniumでは、何らかのアクション（ボタンのクリックなど）でDOMが変化し、そのDOMの変化を待ってからその値を検証する様なテストケースの場合、その「◯◯が終わるまで待機」と言う処理を実装する方法はいくつかあるのですが、一般的に多く使われるのは、ExpectedConditionsを使ったwait処理ではないかと思います。  </p>
<p>ここでは詳しくは説明しませんが、例えば  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wait.until(ExpectedConditions.titleIs(&quot;ページタイトル&quot;));</div></pre></td></tr></table></figure>
<p>の様に記述することで、ページタイトルが指定の文字列になるのを待ったり出来ます。  </p>
<p>ExpectedConditionsのメソッドは結構色んな種類があるので、大抵の待機条件は作れます。  </p>
<p>でも、今回どうしてもオリジナルの待機条件を作る必要があったので、ExpectedConditionsクラスを拡張して、「◯◯秒経ったら次の処理を開始する」為のクラスを作成しました。  </p>
<p>Thread.sleepを使えば同様の処理は行えるのですが、どうもThread.sleepはスレッドを停止させる事でバグの原因になる事があるらしいのと、あとコードチェックに使っているSonarQubeでバグとして警告されてしまうので、使えなかったのです。  </p>
<p>で、具体的な記述方法ですが、  </p>
<p><strong>WaitTimerAttributeCondition.java</strong>    </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">import org.openqa.selenium.WebDriver;</div><div class="line">import org.openqa.selenium.support.ui.ExpectedCondition;</div><div class="line"></div><div class="line">import java.util.Timer;</div><div class="line">import java.util.TimerTask;</div><div class="line"></div><div class="line">public class WaitTimerAttributeCondition implements ExpectedCondition&lt;Boolean&gt; &#123;</div><div class="line"></div><div class="line">  private Boolean flag = false;</div><div class="line"></div><div class="line">  protected WaitTimerAttributeCondition(Long milisec) &#123;</div><div class="line">    TimerTask task = new TimerTask() &#123;</div><div class="line">      public void run() &#123;</div><div class="line">        flag = true;</div><div class="line">      &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    Timer timer = new Timer();</div><div class="line">    timer.schedule(task, milisec);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  public Boolean apply(WebDriver wd) &#123;</div><div class="line">    return flag;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>そして、呼び出し側では、</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wait.until(new WaitTimerAttributeCondition(5000L));</div></pre></td></tr></table></figure>
<p>この様に使います。<br>上記の例だと、5000ミリ秒、すなわち5秒間処理を待機した後、次の処理を開始します。  </p>
<p>ただこの様に、固定の秒数待機して次の処理を行う方法は、ネットワーク速度やマシンスペックなど環境が異なると、場合によっては上手く動作しない可能性もあります。  </p>
<p>ただ、今回seleniumでの自動テスト対象になったサイトが、bootstrapを使っており、何らかのアクションにいちいちアニメーションが入って来て、そのアニメーションの終了を検知する必要がどうしてもあったので、実装してみました。  </p>
<p>ぜひ参考にして下さい。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;どうも、せっきーです。&lt;br&gt;いま業務でseleniumを使ったUI自動テストの実装を進めています。  &lt;/p&gt;
&lt;p&gt;seleniumは色んな言語で記述できるし、何ならユーザーの動作を記録して自動でテストケースを生成したり、色々できるんですが、その辺の説明は他のブログにお
    
    </summary>
    
    
      <category term="selenium" scheme="https://h-sekiyama.github.io/tags/selenium/"/>
    
  </entry>
  
  <entry>
    <title>初投稿</title>
    <link href="https://h-sekiyama.github.io/2017/02/20/1/"/>
    <id>https://h-sekiyama.github.io/2017/02/20/1/</id>
    <published>2017-02-20T04:06:59.000Z</published>
    <updated>2017-02-20T04:18:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>今日からブログ再開します。<br>日々のアウトプットがインプットのモチベーションになると言う話は良く聞くので、エンジニアとして日々学んだ事をつらつらとアウトプットしていく予定です。  </p>
<p>当方のエンジニアとしての経歴はフロントエンドエンジニア5年、Android、iOSエンジニア半年（2017年2月現在）です。  </p>
<p>エンジニアとしての職歴はほとんどがフロントエンドでした。<br>しかしこれからはスマートフォンのネイティブコードもバリバリ書けるエンジニアを目指しているので、日々邁進していきます。  </p>
<p>とりあえず生暖かい目で見守って頂ければ幸いです。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今日からブログ再開します。&lt;br&gt;日々のアウトプットがインプットのモチベーションになると言う話は良く聞くので、エンジニアとして日々学んだ事をつらつらとアウトプットしていく予定です。  &lt;/p&gt;
&lt;p&gt;当方のエンジニアとしての経歴はフロントエンドエンジニア5年、Android
    
    </summary>
    
    
      <category term="hexo" scheme="https://h-sekiyama.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
